import os
import smtplib
from loguru import logger
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CallbackContext
from urllib.request import urlretrieve

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = ''
# –ü—É—Ç—å –¥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
PHOTO_PATH = 'temporary_image.png'
# –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ Outlook –∏ –ø–∞—Ä–æ–ª—å
OUTLOOK_EMAIL = 'your_email@outlook.com'
OUTLOOK_PASSWORD = 'your_password'
# –ü–æ–ª—É—á–∞—Ç–µ–ª—å
TO_EMAIL = 'recipient_email@domain.com'

class Outlook:
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
    def send_email(image_path: str):
        # –°–æ–∑–¥–∞–µ–º MIME –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–∏—Å—å–º–∞
        msg = MIMEMultipart()
        msg['From'] = OUTLOOK_EMAIL
        msg['To'] = TO_EMAIL
        msg['Subject'] = '–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Telegram –±–æ—Ç–∞'
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ –∫ –ø–∏—Å—å–º—É
        with open(image_path, 'rb') as file:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(file.read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', f'attachment; filename={os.path.basename(image_path)}')
            msg.attach(part)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Outlook –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        try:
            server = smtplib.SMTP('smtp-mail.outlook.com', 587)
            server.starttls()
            server.login(OUTLOOK_EMAIL, OUTLOOK_PASSWORD)
            server.sendmail(OUTLOOK_EMAIL, TO_EMAIL, msg.as_string())
            server.quit()
            logger.success("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
            return False

class Telegram:
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_message(update: Update, context: CallbackContext):
        if update.message.photo:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, await get_file() —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            photo_file = await update.message.photo[-1].get_file()
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
            urlretrieve(photo_file.file_path, PHOTO_PATH)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ {PHOTO_PATH}")

            await update.message.reply_text('‚ú®–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É!')

            # # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ
            # response = Outlook().send_email(PHOTO_PATH)
            # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # if response:
            #     await update.message.reply_text('‚ú®–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É!')
            # else:
            #     await update.message.reply_text('üö´–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(PHOTO_PATH)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, Telegram().handle_message))
    
    logger.success("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
